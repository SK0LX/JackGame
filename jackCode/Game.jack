class Game {

   // 32 = space
   // 80 = p - play
   // 73 = i - info
   // 69 = e - exit
   // 96 = ` - easteregg

   static int gameFieldLeftBorder;
   static int gameFieldRightBorder;
   static int locationToDraw;

   field int score;
   field int countBlocks;

   field Block block;

   field int blockX;
   field int blockY;

   constructor Game new() {
      let gameFieldLeftBorder = 150;
      let gameFieldRightBorder = 350;
      let locationToDraw = 4236;

      let score = 0;
      let countBlocks = 0;

      let blockX = 255;
      let blockY = 255;

      return this;
   }

   function int getLeftBorder(){ return gameFieldLeftBorder; }

   function int getRightBorder(){ return gameFieldRightBorder; }

   /** Disposes this game. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Start Game with menu. */
   method void start(){
      var char key;

      do Screen.clearScreen();
      do Menu.draw(locationToDraw);
      while (true){
         do Sys.wait(60);
         let key = Keyboard.keyPressed();
         if (key = 80) 
         { 
            do Menu.earse();
            do run(); 
         } // p play
         if (key = 73) 
         { 
            do Menu.earse();
            do getInfo();
            do Menu.draw(locationToDraw);
            do Sys.wait(200);
         } // i info
         if (key = 69) 
         { 
            do Menu.earse();
            return;
         } // e exit
         if (key = 96) 
         {
            do Easteregg.show(locationToDraw);
            do Menu.draw(locationToDraw);
         } // ` easteregg
      }
      return;
   }

   /** Move block left and then right while space is not pressed*/
   method void moveBlock() {
      var char key;
      while (~(key = 32)){ // space
         let key = Keyboard.keyPressed();
         do block.move();
         do Sys.wait(21 - score);
      }
      do Sys.wait(100);  // delays the next press the space
      return;
   }

   /** Runs the game: building a tower */
   method void run () {
      var int lastY;
      var int lastX;
      var bool notBreak;
      var char key;
      var int countBlocks;
      
      let score = 0;
      let countBlocks = 0;

      let notBreak = true;
      let block = Block.new(blockX, blockY);
      let lastY = block.getY() - block.getSizeY();
      let lastX = block.getX();

      do ScoreGame.draw();
      do Phone.draw();
      do block.draw(); // first block

      while (~(countBlocks = 20) & notBreak){
         do block.dispose();
         let block = Block.new(gameFieldLeftBorder, lastY);
         do moveBlock();

         let countBlocks = countBlocks + 1;
         let lastY = block.getY() - block.getSizeY();

         if (block.getX() < (blockX + block.getSizeX()) & block.getX() > (blockX - block.getSizeX())){
            let score = score + 1;
            if (block.getX() = lastX){ let score = score + 2; } // bonus for perfect block
            let lastX = block.getX();

            do Output.moveCursor(1, 2);
            do Output.printInt(score);
         } 
         else { let notBreak = false; }
      }

      if (score > 16){
         do Phone.earse();
         do WinPhone.draw(locationToDraw);
      }
      else{
         do Phone.earse();
         do GameOver.draw(locationToDraw - 2);  
      }
      do Sys.wait(1200);
      do block.dispose();
      do Phone.earse();
      do Menu.draw(locationToDraw);
      return;
   }

   method void getInfo () {
      var char key;
      do Sys.wait(100);
      do Info.draw(locationToDraw);
      while (true){
         do Sys.wait(20);
         let key = Keyboard.keyPressed();
         if (key = 80) 
         { 
            do Info.earse();
            do run();
            return;
         } // p play
         if (key = 73) 
         { 
            do Info.earse();
            return;
          } // i go back
         if (key = 96) 
         {
            do Easteregg.show(locationToDraw);
            do Info.draw(locationToDraw);
         } // ` easteregg
      }
      return;
   }
}